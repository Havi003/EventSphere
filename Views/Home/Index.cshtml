@model IEnumerable<FormEvent>

@{
    ViewData["Title"] = "Home Page";
    var currentPage = ViewData["CurrentPage"] as int? ?? 1;
    var totalPages = ViewData["TotalPages"] as int? ?? 1;
}
@section Styles {
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="~/css/index.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        /* Carousel Controls */
        .carousel-controls {
            position: absolute;
            bottom: 15%;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
        }
        /* Position navigation buttons on left and right */
        .carousel-control-prev,
        .carousel-control-next {
            width: 10%;
            height: 100%;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
            opacity: 1;
        }

        .carousel-control-prev {
            left: -30px;
            z-index: 9999;
        }

        .carousel-control-next {
            right: -30px;
            z-index: 9999;
        }

        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: rgba(0, 0, 0, 0.5);
            background-size: contain;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            padding: 10px;
        }

        .custom-control {
            width: 40px;
            height: 40px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            position: relative;
        }

            .custom-control span {
                display: flex;
                align-items: center;
                justify-content: center;
                width: 24px;
                height: 24px;
                filter: brightness(2);
            }
    </style>
</head>
<body>
	<!-- Carousel Section -->

    <div class="carousel-container mt-1">
        <div id="eventCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <!-- First Slide -->
                <div class="carousel-item active">
                    <img src="~/images/event1.jpg" class="d-block w-100" alt="Event Image" loading="lazy">
                </div>
                <!-- Second Slide -->
                <div class="carousel-item">
                    <img src="~/images/event2.jpg" class="d-block w-100" alt="Event Image" loading="lazy">
                </div>
                <!-- Third Slide -->
                <div class="carousel-item">
                    <img src="~/images/event3.jpg" class="d-block w-100" alt="Event Image" loading="lazy">
                </div>
                <div class="carousel-item">
                    <img src="~/images/event4.jpg" class="d-block w-100" alt="Event Image" loading="lazy">
                </div>
            </div>
            <!-- Centered Fixed Content (Does Not Change) -->
            <div class="overlay-content">
                <h2 class="event-title">Enter the sphere of amazing events!</h2>
                <!-- Search Bar -->
                <div class="search-bar" style="position: relative;">
                    <input type="text" id="event-search" class="form-control" placeholder="Search event..." autocomplete="off">
                    <button class="btn"><i class="fa-solid fa-magnifying-glass search-icon"></i></button>
                    <ul id="suggestions" class="list-group" style="position:absolute; z-index:1000; width:100%; display:none; max-height: 300px; overflow-y: auto; top: 100%; left: 0; margin-top: 5px;"></ul>
                </div>
            </div>
            <!-- Carousel Controls -->
            <div class="carousel-controls">
                <!-- Carousel Controls - Properly Positioned Left and Right -->
                <button class="carousel-control-prev custom-control" type="button" data-bs-target="#eventCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next custom-control" type="button" data-bs-target="#eventCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
            </div>
        </div>
    </div>
    <!-- Event Grid Section -->
    <div class="container  mt-5">
        <h2 class="text-start mt-4 mb-4">Upcoming Events</h2>
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var eventItem in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="data:image/jpg;base64,@eventItem.Poster" class="card-img-top" alt="@eventItem.EventName" loading="lazy">
                        <div class="card-body">
                            <h5 class="card-title">@eventItem.EventName</h5>
                            <p class="card-text">
                                <strong>Date:</strong> @eventItem.EventDate.ToString("dd MMMM, yyyy") <br>
                                <strong>Location:</strong> @eventItem.Location
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="container">
        <div class="pagination d-flex justify-content-center mt-4">
            <!-- Previous Button -->
            <a asp-action="Index" asp-route-pageNumber="@(currentPage - 1)" asp-route-pageSize="3"
               class="btn btn-primary me-2 @(currentPage == 1 ? "disabled" : "")">
                <i class="fa fa-chevron-left"></i> Previous
            </a>

            <!-- Page Numbers -->
            <span class="align-self-center">Page @currentPage of @totalPages</span>

            <!-- Next Button -->
            <a asp-action="Index" asp-route-pageNumber="@(currentPage + 1)" asp-route-pageSize="3"
               class="btn btn-primary ms-2 @(currentPage == totalPages ? "disabled" : "")">
                Next <i class="fa fa-chevron-right"></i>
            </a>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const input = document.getElementById('event-search');
            const suggestions = document.getElementById('suggestions');
            let debounceTimer;

            // Debounce function to limit API calls
            function debounce(callback, delay) {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(callback, delay);
            }

            function fetchSuggestions(query) {
                if (query.length === 0) {
                    suggestions.style.display = 'none';
                    suggestions.innerHTML = '';
                    return;
                }

                fetch(`/Home/SearchSuggestions?term=${encodeURIComponent(query)}`)
                    .then(res => {
                        if (!res.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return res.json();
                    })
                    .then(data => {
                        suggestions.innerHTML = '';
                        if (data && data.length > 0) {
                            data.forEach(item => {
                                const li = document.createElement('li');
                                li.className = 'list-group-item list-group-item-action';
                                li.style.cursor = 'pointer';
                                li.style.padding = '10px 15px';
                                li.style.border = 'none';
                                li.style.borderBottom = '1px solid #eee';
                                li.style.backgroundColor = 'white';
                                li.textContent = item;
                                li.onclick = function() {
                                    input.value = item;
                                    suggestions.style.display = 'none';
                                    // Optionally submit the form or navigate to search results
                                    window.location.href = `/Home/Index?search=${encodeURIComponent(item)}`;
                                };
                                suggestions.appendChild(li);
                            });
                            suggestions.style.display = 'block';
                        } else {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.textContent = 'No events found';
                            li.style.padding = '10px 15px';
                            li.style.color = '#6c757d';
                            li.style.fontStyle = 'italic';
                            li.style.backgroundColor = 'white';
                            suggestions.appendChild(li);
                            suggestions.style.display = 'block';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching suggestions:', error);
                        suggestions.style.display = 'none';
                    });
            }

            // Add input event listener with debounce
            input.addEventListener('input', function() {
                const query = input.value.trim();
                debounce(() => fetchSuggestions(query), 300);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!input.contains(e.target) && !suggestions.contains(e.target)) {
                    suggestions.style.display = 'none';
                }
            });

            // Handle keyboard navigation
            input.addEventListener('keydown', function(e) {
                const items = suggestions.getElementsByTagName('li');
                let activeItem = document.querySelector('#suggestions li.active');
                let index = Array.from(items).indexOf(activeItem);

                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        if (index < items.length - 1) {
                            if (activeItem) activeItem.classList.remove('active');
                            index++;
                            items[index].classList.add('active');
                            items[index].scrollIntoView({ block: 'nearest' });
                        }
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        if (index > 0) {
                            if (activeItem) activeItem.classList.remove('active');
                            index--;
                            items[index].classList.add('active');
                            items[index].scrollIntoView({ block: 'nearest' });
                        }
                        break;
                    case 'Enter':
                        if (activeItem) {
                            e.preventDefault();
                            input.value = activeItem.textContent;
                            suggestions.style.display = 'none';
                            window.location.href = `/Home/Index?search=${encodeURIComponent(activeItem.textContent)}`;
                        }
                        break;
                    case 'Escape':
                        suggestions.style.display = 'none';
                        break;
                }
            });
        });
    </script>

    <style>
        #suggestions {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #dee2e6;
            border-radius: 4px;
            background-color: white;
        }
        #suggestions li {
            transition: background-color 0.2s;
        }
        #suggestions li:hover, #suggestions li.active {
            background-color: #f8f9fa !important;
        }
        #suggestions li:last-child {
            border-bottom: none;
        }
    </style>
</body>
</html>
